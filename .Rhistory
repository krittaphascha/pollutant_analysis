# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]),
paste0("Lag", lag, "_RR")))
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]),
paste0("Lag", lag, "_RR")))
}
RR_prov_lagged_pollutant_df
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]),
paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper")))
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]),
paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper")))
}
RR_prov_lagged_pollutant_df
Province
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]),
paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper")
))
}
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
RR_prov_lagged_pollutant_df
as.data.frame(estimate_tab[, -1]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR")),
setNames(as.data.frame(estimate_tab[, -c(1, 2)]), paste0("Lag", lag, "_Lower")),
)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR")),
setNames(as.data.frame(estimate_tab[, -c(1, 2)]), paste0("Lag", lag, "_Lower")),
}
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR")),
setNames(as.data.frame(estimate_tab[, -c(1, 2)]), paste0("Lag", lag, "_Lower")),
}
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR"))
}
}
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR")))
RR_prov_lagged_pollutant_df
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df,
setNames(as.data.frame(estimate_tab[, -1]), paste0("Lag", lag, "_RR")))
}
RR_prov_lagged_pollutant_df
estimate_tab
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
colnames(RR_prov_lagged_pollutant_df) <- c("province", paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
colnames(RR_prov_lagged_pollutant_df)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
RR_prov_lagged_pollutant_df
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df)
colnames(RR_prov_lagged_pollutant_df)
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
RR_prov_lagged_pollutant_df
estimate_tab <- estimate_tab[, c("Province", "RR", "Lower", "Upper")]
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
estimate_tab <- estimate_tab[, c("Province", "RR", "Lower", "Upper")]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
estimate_tab
estimate_tab <- estimate_tab[, c("RR", "Lower", "Upper")]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
estimate_tab <- estimate_tab[, c("RR", "Lower", "Upper")]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
RR_prov_lagged_pollutant_df
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag, "_pollutant")
estimate_tab <- get(estimate_tab_name)
estimate_tab <- estimate_tab[, c("RR", "Lower", "Upper")]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag, "_RR"),
paste0("Lag", lag, "_Lower"),
paste0("Lag", lag, "_Upper"))
}
RR_prov_lagged_pollutant_df
# Plot pooled estimate together with province-specific estimate
# initialize dataframe
RR_prov_lagged_pollutant_df <- data.frame(Province = valid_provinces)
for (lag in seq(0:lag_number)) {
estimate_tab_name <- paste0("RR_prov_lag", lag-1, "_pollutant")
estimate_tab <- get(estimate_tab_name)
estimate_tab <- estimate_tab[, c("RR", "Lower", "Upper")]
# append to dataframe
RR_prov_lagged_pollutant_df <- cbind(RR_prov_lagged_pollutant_df, estimate_tab)
colnames(RR_prov_lagged_pollutant_df) <- c(paste0("Lag", lag-1, "_RR"),
paste0("Lag", lag-1, "_Lower"),
paste0("Lag", lag-1, "_Upper"))
}
RR_prov_lagged_pollutant_df
list_of_lag_dfs <- lapply(0:lag_number, function(lag) {
# Get the data frame by name
df_name <- paste0("RR_prov_lag", lag, "_pollutant")
df <- get(df_name)[, c("RR", "Lower", "Upper")]
# Set the column names for this specific data frame
names(df) <- paste0("Lag", lag, c("_RR", "_Lower", "_Upper"))
# Return the processed data frame
return(df)
})
# 2. Combine the initial 'Province' data frame with the list of results in one step
RR_prov_lagged_pollutant_df <- do.call(cbind, c(data.frame(Province = valid_provinces), list_of_lag_dfs))
RR_prov_lagged_pollutant_df
list_of_lag_dfs <- lapply(0:lag_number, function(lag) {
# Get the data frame by name
df_name <- paste0("RR_prov_lag", lag, "_pollutant")
df <- get(df_name)[, c("RR", "Lower", "Upper")]
# Set the column names for this specific data frame
names(df) <- paste0("Lag", lag, c("_RR", "_Lower", "_Upper"))
# Return the processed data frame
return(df)
})
# 2. Combine the initial 'Province' data frame with the list of results in one step
RR_prov_lagged_pollutant_df <- do.call(cbind, c(data.frame(Province = valid_provinces), list_of_lag_dfs))
RR_prov_lagged_pollutant_df
df
df
list_of_lag_dfs
# Set the column names for this specific data frame
names(df) <- paste0("Lag", lag-1, c("_RR", "_Lower", "_Upper"))
datalist
datalist$Bangkok
model_12_string <- paste(model_7_string, "as.factor(is_lotteryday)", sep = " + ")
model_12 <- create_model_formula(model_12_string)
model_12_qaic <- test_model(model_12, datalist)
model_12 <- create_model_formula(model_12_string)
test_model <- function(model_string, datalist) {
# Initialize a matrix to store results
tmp_qaic <- matrix(NA, length(datalist), 1, dimnames = list(prov_name_en, "Q-AIC"))
# The system.time wrapper can be used here to time the whole loop
system.time({
for(i in seq_along(datalist)) { # Using seq_along is safer than seq(m)
# PRINT ITERATION
cat(i, "")
# Get data for this iteration
original_data <- datalist[[i]]
# --- Data Cleaning Step ---
# Use a NEW variable name here to avoid overwriting the input list
cleaned_data <- original_data[complete.cases(original_data[, required_cols]), ]
if (nrow(cleaned_data) == 0) {
warning(paste("Iteration", i, "skipped: No complete cases after removing NAs."))
next
}
options(na.action = "na.exclude")
# CREATE THE SPLINE
cb_pollutant <- crossbasis(cleaned_data[[pollutant_col_name]], lag = c(0, 7),
argvar = list(type = "lin", cen = FALSE),
arglag = list(fun = "ns", df = 3))
# Add the crossbasis object to the cleaned data
cleaned_data$cb_pollutant <- cb_pollutant
# RUN THE CONDITIONAL-POISSON MODEL
model <- gnm(model_string,
family = quasipoisson(),
eliminate = factor(stratum),
data = cleaned_data) # Use the new variable here
# Q-AIC COMPUTATION
tmp_qaic[i, ] <- fqaic(model)
# EXTRACT AND SAVE THE RELATED COEF AND VCOV
pred_stage1_pollutant <- crosspred(cb_pollutant, model, cen = FALSE, cumul = TRUE)
ymat_pollutant[i, ] <- pred_stage1_pollutant$coef
list_vcov_pollutant[[i]] <- pred_stage1_pollutant$vcov
} # End of for loop
}) # End of system.time
return(sum(tmp_qaic, na.rm = TRUE))
}
model_12_qaic <- test_model(model_12, datalist)
set.seed(123)
setwd("~/Projects/hf_pm_analysis")
dat <- read.csv("data/daily_all_weather_30May.csv")
# properly format date
dat$date_start <- as.Date(dat$date_start, "%Y-%m-%d")
dat$dow <- as.factor(weekdays(dat$date_start))
dat$month <- as.factor(months(dat$date_start))
dat$year <- as.factor(format(dat$date_start, format = "%Y"))
# get strata for case crossover analysis
dat$stratum <- as.factor(dat$year:dat$month:dat$dow)
provinces <- as.character(unique(dat$prov_name))
prov_name_en <- c(
"Bangkok", "Kanchanaburi", "Kamphaeng Phet", "Khon Kaen", "Chanthaburi",
"Chachoengsao", "Chon Buri", "Trang", "Trat", "Tak", "Nakhon Pathom",
"Nakhon Phanom", "Nakhon Ratchasima", "Nakhon Si Thammarat", "Nakhon Sawan",
"Nonthaburi", "Narathiwat", "Nan", "Buri Ram", "Pathum Thani",
"Prachuap Khiri Khan", "Prachin Buri", "Phra Nakhon Si Ayutthaya", "Phayao",
"Phichit", "Phitsanulok", "Phuket", "Mukdahan", "Yala", "Rayong", "Ratchaburi",
"Lop Buri", "Lampang", "Lamphun", "Sakon Nakhon", "Songkhla", "Satun",
"Samut Prakan", "Samut Songkhram", "Samut Sakhon", "Saraburi", "Sa Kaeo",
"Suphan Buri", "Surat Thani", "Sukhothai", "Nong Khai", "Udon Thani",
"Uttaradit", "Uthai Thani", "Ubon Ratchathani", "Chiang Rai", "Chiang Mai",
"Phetchabun", "Loei", "Phrae", "Mae Hong Son"
)
province_map <- setNames(prov_name_en, provinces)
# replace province names with English names
dat$prov_name_en <- province_map[as.character(dat$prov_name)]
# separate dataframe by provinces
datalist <- lapply(prov_name_en, function(provname) dat[dat$prov_name_en == provname, ])
names(datalist) <- prov_name_en
# ============================
# Load necessary packages
library(dplyr); library(dlnm); library(splines); library(tsModel); library(gnm)
## SELECT POLLUTANT OF INTEREST
pollutant_col_name <- "PM2.5"
outcome_col_name <- "hf_prim_hos_count"
lag_number <- 4
# ============================
results_dir <- paste0("output//results_", pollutant_col_name, '-' ,outcome_col_name, "-", lag_number, "lag")
dir.create(results_dir, showWarnings = FALSE, recursive = TRUE) # recursive = TRUE if pollutant_col_name could contain slashes (e.g. "PM2.5/O3")
cat("\nSaving results to directory:", file.path(getwd(), results_dir), "\n")
## RANGE FOR METEOROLOGICAL VARIABLES ##
rangepoll <- t(sapply(datalist, function(x) range(x[[pollutant_col_name]],  na.rm = T)))
# ## DLNM PARAMETERS
boundpoll <- c(min(rangepoll), max(rangepoll))
## ADDITIONAL INFORMATION
m <- length(datalist)
####################################################
## FIRST STAGE MODEL (PROVINCE-SPECIFIC ESTIMATE) ##
####################################################
## BUILT OBJECTS WHERE RESULTS WILL BE STORED: # ymat IS THE MATRIX FOR THE OUTCOME PARAMETERS
## Slist IS THE LIST WITH (CO)VARIANCE MATRICES # LINEAR FOR NO2 AND 3 DFs FOR ITS LAG
ymat_pollutant <- matrix(NA, length(datalist), 3, dimnames = list(prov_name_en, paste("spl", seq(3), sep = ""))) # 3DF
list_vcov_pollutant <- vector("list", length(datalist))
names(list_vcov_pollutant) <- prov_name_en
## FUNCTION TO COMPUTE THE Q-AIC IN QUASI-POISSON MODELS
fqaic <- function(model) {
loglik <- sum(dpois(model$y,model$fitted.values,log=TRUE))
phi <- summary(model)$dispersion
qaic <- -2*loglik + 2*summary(model)$df[3]*phi
return(qaic)
}
## MATRIX FOR Q-AIC VALUE
qaic <- matrix(NA, length(datalist), 1, dimnames = list(prov_name_en, paste("Q-AIC")))
## WARNING FOR PREDICTION BEYOND BOUNDARIES SUPPRESSED: RUN THE FIRST STAGE ANALYSIS
options(warn = -1)
## add COLUMNS that cannot be nulled
required_cols <- c("temperature", "humidity", "pressure")
#### MODEL SELECTION ######
# create function to return sum of QAIC values given model
# model_predictors <- "cb_pollutant + ns(temperature, 3) + ns(humidity, 3) + ns(pressure, 3) + as.factor(is_holiday)"
model_predictors <- "cb_pollutant + ns(temperature, 3) + as.factor(is_holiday)"
model_formula_string <- paste(outcome_col_name, "~", model_predictors)
model_formula_string <- as.formula(model_formula_string)
create_model_formula <- function(predictors_string) {
model_formula_string <- paste(outcome_col_name, "~", predictors_string)
return(as.formula(model_formula_string))
}
model_1_string <- "cb_pollutant + ns(temperature, 3) + ns(humidity, 3) + ns(pressure, 3) + as.factor(is_holiday)"
model_2_string <- "cb_pollutant"
model_3_string <- "cb_pollutant + ns(temperature, 3)"
model_4_string <- "cb_pollutant + ns(humidity, 3)"
model_5_string <- "cb_pollutant + ns(pressure, 3)"
model_6_string <- "cb_pollutant + as.factor(is_holiday)"
model_7_string <- paste(model_6_string, "ns(temperature, 3)", sep = " + ")
model_8_string <- paste(model_6_string, "ns(humidity, 3)", sep = " + ")
model_9_string <- paste(model_6_string, "ns(pressure, 3)", sep = " + ")
model_10_string <- paste(model_7_string, "ns(humidity, 3)", sep = " + ")
model_11_string <- paste(model_7_string, "ns(pressure, 3)", sep = " + ")
model_12_string <- paste(model_7_string, "as.factor(is_lotteryday)", sep = " + ")
model_1 <- create_model_formula(model_1_string)
model_2 <- create_model_formula(model_2_string)
model_3 <- create_model_formula(model_3_string)
model_4 <- create_model_formula(model_4_string)
model_5 <- create_model_formula(model_5_string)
model_6 <- create_model_formula(model_6_string)
# model_6 (holidays) gain the lowest QAIC values
model_7 <- create_model_formula(model_7_string)
model_8 <- create_model_formula(model_8_string)
model_9 <- create_model_formula(model_9_string)
# model_7 (temperature) gains the lowest QAIC values
model_10 <- create_model_formula(model_10_string)
model_11 <- create_model_formula(model_11_string)
model_12 <- create_model_formula(model_12_string)
test_model <- function(model_string, datalist) {
# Initialize a matrix to store results
tmp_qaic <- matrix(NA, length(datalist), 1, dimnames = list(prov_name_en, "Q-AIC"))
# The system.time wrapper can be used here to time the whole loop
system.time({
for(i in seq_along(datalist)) { # Using seq_along is safer than seq(m)
# PRINT ITERATION
cat(i, "")
# Get data for this iteration
original_data <- datalist[[i]]
# --- Data Cleaning Step ---
# Use a NEW variable name here to avoid overwriting the input list
cleaned_data <- original_data[complete.cases(original_data[, required_cols]), ]
if (nrow(cleaned_data) == 0) {
warning(paste("Iteration", i, "skipped: No complete cases after removing NAs."))
next
}
options(na.action = "na.exclude")
# CREATE THE SPLINE
cb_pollutant <- crossbasis(cleaned_data[[pollutant_col_name]], lag = c(0, 7),
argvar = list(type = "lin", cen = FALSE),
arglag = list(fun = "ns", df = 3))
# Add the crossbasis object to the cleaned data
cleaned_data$cb_pollutant <- cb_pollutant
# RUN THE CONDITIONAL-POISSON MODEL
model <- gnm(model_string,
family = quasipoisson(),
eliminate = factor(stratum),
data = cleaned_data) # Use the new variable here
# Q-AIC COMPUTATION
tmp_qaic[i, ] <- fqaic(model)
# EXTRACT AND SAVE THE RELATED COEF AND VCOV
pred_stage1_pollutant <- crosspred(cb_pollutant, model, cen = FALSE, cumul = TRUE)
ymat_pollutant[i, ] <- pred_stage1_pollutant$coef
list_vcov_pollutant[[i]] <- pred_stage1_pollutant$vcov
} # End of for loop
}) # End of system.time
return(sum(tmp_qaic, na.rm = TRUE))
}
# Run the test for each model
model_1_qaic <- test_model(model_1, datalist)
model_2_qaic <- test_model(model_2, datalist)
model_3_qaic <- test_model(model_3, datalist)
model_4_qaic <- test_model(model_4, datalist)
model_5_qaic <- test_model(model_5, datalist)
model_6_qaic <- test_model(model_6, datalist)
model_7_qaic <- test_model(model_7, datalist)
model_8_qaic <- test_model(model_8, datalist)
model_9_qaic <- test_model(model_9, datalist)
model_10_qaic <- test_model(model_10, datalist)
model_11_qaic <- test_model(model_11, datalist)
model_12_qaic <- test_model(model_12, datalist)
print(paste("Model 1 QAIC:", model_1_qaic))
print(paste("Model 2 QAIC:", model_2_qaic))
print(paste("Model 3 QAIC:", model_3_qaic))
print(paste("Model 4 QAIC:", model_4_qaic))
print(paste("Model 5 QAIC:", model_5_qaic))
print(paste("Model 6 QAIC:", model_6_qaic))
print(paste("Model 7 QAIC:", model_7_qaic))
print(paste("Model 8 QAIC:", model_8_qaic))
print(paste("Model 9 QAIC:", model_9_qaic))
print(paste("Model 10 QAIC:", model_10_qaic))
print(paste("Model 11 QAIC:", model_11_qaic))
print(paste("Model 12 QAIC:", model_12_qaic))
# Save all in list
model_qaic_list <- list(
model_1 = model_1_qaic,
model_2 = model_2_qaic,
model_3 = model_3_qaic,
model_4 = model_4_qaic,
model_5 = model_5_qaic,
model_6 = model_6_qaic,
model_7 = model_7_qaic,
model_8 = model_8_qaic,
model_9 = model_9_qaic,
model_10 = model_10_qaic,
model_11 = model_11_qaic,
model_12 = model_12_qaic
)
# Save the model QAIC values to a file
model_qaic_df <- as.data.frame(model_qaic_list)
model_string <- c(model_1_string,
model_2_string,
model_3_string,
model_4_string,
model_5_string,
model_6_string,
model_7_string,
model_8_string,
model_9_string,
model_10_string,
model_11_string,
model_12_string)
model_qaic_df <- rbind(model_string, model_qaic_df)
write.csv(model_qaic_df, file.path(results_dir, "model_qaic_values.csv"), row.names = TRUE)
model_qaic_df
renv::status()
set.seed(123)
setwd("~/Projects/hf_pm_analysis")
dat <- read.csv("data/daily_all_weather_30May.csv")
Rnvim.selection()
Rnvim.selection()
quit(save = "yes")
set.seed(123)
setwd("~/Projects/hf_pm_analysis")
dat <- read.csv("data/daily_all_weather_30jul.csv")
dat$date_start <- as.Date(dat$date_start, "%Y-%m-%d")
dat$dow <- as.factor(weekdays(dat$date_start))
dat$month <- as.factor(months(dat$date_start))
dat$year <- as.factor(format(dat$date_start, format = "%Y"))
dat$stratum <- as.factor(dat$year:dat$month:dat$dow)
provinces <- as.character(unique(dat$prov_name))
dat
head(dat)
Rnvim.selection()
ymat_pollutant <- matrix(NA, length(datalist), 3, dimnames = list(prov_name_en, paste("spl", seq(3), sep = ""))) # 3DF
datalist
 whquit(save = "yes")
quit(save = "yes")
quit(save = "yes")
